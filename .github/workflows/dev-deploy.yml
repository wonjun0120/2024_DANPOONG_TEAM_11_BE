# dev branch 변경된 경우 dev 서버로 반영
name: dev-publish

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle
      run: ./gradlew build

    - name: Docker image build and push
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
        tags: latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout dev
      uses: actions/checkout@v4
  
    - name: Connect to EC2 and install docker 
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
        EC2_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$EC2_SSH_KEY" > ec2_key.pem
        chmod 400 ec2_key.pem
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST '
          # sudo 설치
          if ! command -v sudo &> /dev/null; then
            apt update && apt install -y sudo
          fi
          
          # Docker 설치
          if ! command -v docker &> /dev/null
          then
            sudo apt-get update
            sudo apt-get install ca-certificates curl
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            
            # Add the repository to Apt sources:
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
            # Docker 서비스 시작 및 활성화
            sudo systemctl start docker
            sudo systemctl enable docker
    
            # Docker 버전 확인
            docker --version
            docker compose version
          else
            echo "Docker already installed"
            docker --version
            docker compose version
          fi
        '  
        
    - name: Copy docker-compose file to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
      run: |
        scp -o StrictHostKeyChecking=no -i ec2_key.pem docker-compose.yml ${EC2_USER}@${EC2_HOST}:~/
        scp -o StrictHostKeyChecking=no -i ec2_key.pem docker-compose.override.yml ${EC2_USER}@${EC2_HOST}:~/


    - name: pull docker and run server
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
        EC2_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST '
          # 명령어 실행
          sudo docker rm -f $(sudo docker compose ps -qa)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          sudo docker compose up -d
          sudo docker image prune -f
        '
        
  